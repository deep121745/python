hierarchy of operators:
PEMDAS
In python , // is used to round off 
            ** is used to calculate power 

Variables-> it is a placeholder for some value
 variablename = value

String -> basically means text , and should be included between quotes
a="hey "
to print stuff -> 
print("___")

to printout raw string i.e, without considering escape characters,etc include r :
print(r"___")

we can also add as well as multiply strings together in python

Accessing characters in strings:
a[0,1,2,...]    OR   a[-1,-2,-3,....]

Slicing characters:
         a[start:end-1]
         a[:]   gives entire string

len(a)  ->   gives length of our string

making LIST->  

listname =[1,2,3,...]
we can change its entry as: listname[2]=new value      (we can also replace multiple items using _:_)
we can also delete items by setting it equal to empty []
we can add new entries to our list as: listname + [6,3,5,6]
but this process is temporary so in order to do it permanently:
listname.append(one argument)
We can also slice our lists

**Identation is very important in python 
1. if condition:
        print("__")

2.if condition is ___:                     {when dealing with numbers use is while with    
      print("___")
  elif condition is __:                       numbers use relational operators}
       print("__") 
If none of them is true then use
   else:
       print("__")

for variable in listname:
     print(variable)


**RANGE: loop without list
for variable in range(5);
     print("__")

we can also give range of numbers :
  range(begin,end,how much increment)

**while loop run until condition become false
while condition :
    print(variable)

to stop loop we use increment conditions so that after some execution condition gets false .

Comments: #........(single line)
          ***..........
             ............***


whenever we want to print no. with string then use comma:
print("hi",5)

break -> stops loop and break execution

continue ->  ignores certain items and continue execution

Functions: set of codes which are written for our comfort as we don't 've to over n over again
Defining function: 
    def functionname ():                  
         line of code                         
         __________
         print('___')

To use this function:
 functionname()

 inside paranthesis we provide extra info declaring variable,etc
 def sum(a):
     ans=a+3
      print(ans)
On calling:
sum(2)        it gives 5

Return-> it is use to use our calculated value further
def sum(a):
     ans=a+3
      return ans
d=sum(2)
def mult(c)
      pro=c*d
after calling:
 mult(5)

Setting default arguments:
def gender(sex='unknown'):
    if sex is 'm':
         sex='male'
    elif sex is 'f':
         sex='female'
    print(sex)

 gender('m')   -> gives male
 gender('f')   -> gives female
 gender()   -> gives default i.e, unknown


KEYWORD ARGUMENTS:
def sentence(name='jay',action='ate',item='food'):
     print(name,action,item)

sentence()                                         -->this prints default argument
sentence('john','is','good')                        -->prints keyword argument
we can also change selected arguments leaving default argument as such:
sentence(item='play',action='likes to')

FUNCTION THAT CAN TAKE ANY NUMBER OF ARGUMENTS   (flexible aruments) :
def add(*args):             (means there can be any number of arguments)
    total=0
    for a in args:
        total+=a
    print(total)

add (2,3)
add (3,4,5,6..)         can add any number of parameters

UNPACKING ARGUMENTS:
def health_calculator(age;apples_ate,smoking)
     answer=(100-age)+(apples_ate*1.8)-(smoking*1.6)
     print(answer)

deep_data={21,8,0}

health_calculator(deep_data[0],deep_data[1],deep_data[2])
but there is a shortcut to this which is called unpacking arguments**
health_calculator(*deep_data)

Set -> is a collection of items but it can't have any duplicates like list can :
grocery={'bear','milk','apple','bear'}
here bear has its duplicate so it prints bear only one time but in case of list it prints items as it is .
USE {} WITH SETS AND [] WITH LIST

DICTIONARY IN PYTHON:
dictionary in python have keys and values as normal dictionary has words and their definitions
SYNTAX: dictionaryname ={key:value,key2:value,..............}

classmate = {'John':'is great','Jay':'is confused'}
print(classmate)                            -> prints entire dictionary 
print(classmate['Jay'])                      -> prints particular key value

in order to access more items in dictionary:

for k,v in classmate.items():
     print(k+v)


MODULES:  very often we need to use particular block of codes not only in same programs but also in other programs so it is better to store those codes in a particular file 
(function included in other file)
in order to use module first create a new python file with py extension:
def name():
    print('jay')

so in order to use it go to main file:
import filename
filename.name()

we can also import other people's module (prestored or can be downloaded from internet)

import random
x= random.randrange[1,100]
print(x)

****
Program to download an image from internet:
import random             --->whenever we download images we've to give them a random name
                                          as we don't wanna to name a bunch of whole as same
import urllib.request               ---> package which allows to get data from website

def download_webimage(url):                        
    name= random.randrange[1,1000]
    full_filename= str(name)+.jpeg                -->adding .jpeg extension as it is   
                                                        downloaded as number
    urllib.request urlretrieve(url,full_filename)   -->using our module

download_webimage(urlofsomejpeg)

***HOW TO READ AND WRITE FILES:
creating a file:
fileobject=open('filenameuwannacreate','w')        ---> prepare a file to be created 
                                                      and w prepare to get write in it
fileobject.write('write stuff here\n')              --> writing on it
fileobject.write('more stuff ')
fileobject.close()                          -->doesn't take any parameter it just free's    
                                              space in our memory
(usually we use fw as fileobject here and fr in case to read file)
To read file:
fr=open('filename','r')         -->r specifies that we want to read  
text=fr.read()                  -->so in order to work on it we store it in variable
print(text)
fr.close()                        --> closes our object                     

DOWNLOADING FILES FROM INTERNET :
First as an example get url of some csv file from yahoo finance 

from urlib import request               -->just another way of importing
goog_url = '_____________'               -->store huge url to some variable

def download_stock_data(csv_url):
    response = request.urlopen(csv_url)    --> connects to internet
    csv = response.read()
    csv_str =str(csv)
    lines = csv_str.split('\\n')         -->splits after every new cahracter
    dest_url= r'goog.csv'                 --> sets destination in our local
    fx = open(dest_url,'w')
    for line in lines:
         fx.write(line+'\n')
    fx.close()

    download_stock_data(goog_url)


MORE ON LIST:
let our list name is arr
1. append(x) : adds single element to list
2. extend(L) : merges another listL to end
    can add multiple elements
    arr.extend([3,4])
3. insert(i,x) : insert x at index i
arr.insert(i,x)
4. remove(x) : removes first occurence of element x 
arr.remove(x)
5. pop() : removes last element of list. If an argument is passed , that index item is poped out. 
arr.pop()
6. index(x): returns first index of a value in the list.
arr.index(x)
7. count(x): counts no. of occurence of an element x
8.sort(): sorts the list
9. reverse() : reverses the list
